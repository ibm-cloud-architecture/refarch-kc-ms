apiVersion: apps/v1
kind: Deployment
metadata:
  name: "voyages-ms"
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
    app.kubernetes.io/part-of: refarch-kc
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: "{{  .Chart.Name }}-selector"
  template:
    metadata:
      labels:
        app: "{{  .Chart.Name }}-selector"
        version: "current"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: "{{  .Chart.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.servicePort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds}}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds}}
        ports:
        - containerPort: {{ .Values.service.servicePort}}
        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"
        env:
          - name: PORT
            value : "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Release.Name }}"
          - name: KAFKA_BROKERS
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.brokersConfigMap }}"
                key: brokers
          - name: KCSOLUTION_ORDERS_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: ordersTopic
          {{- if .Values.eventstreams.enabled }}
          - name: KAFKA_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.esCredSecret }}"
                key: username
          - name: KAFKA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.esCredSecret }}"
                key: password
          {{- if .Values.eventstreams.caPemFileRequired }}
          - name: CERTS_ENABLED
            value : "true"
          - name: CERTS_PATH
            value : "{{ .Values.eventstreams.caPemFilePath }}/{{ .Values.eventstreams.caPemFileName }}"
          {{- end }}
          {{- end }}
{{- if .Values.generatedBindings.enabled }}
{{.Files.Get "bindings.yaml" | indent 10 }}
{{- end }}
        {{- if and (.Values.eventstreams.enabled) (.Values.eventstreams.caPemFileRequired) }}
        volumeMounts:
          - mountPath: "{{ .Values.eventstreams.caPemFilePath }}"
            name: eventstreams-pem-certificate
            readOnly: true
        {{- end }}
      {{- if and (.Values.eventstreams.enabled) (.Values.eventstreams.caPemFileRequired) }}
      volumes:
        - name: eventstreams-pem-certificate
          secret:
            secretName: "{{ .Values.eventstreams.caPemSecretName }}"
      {{- end }}
